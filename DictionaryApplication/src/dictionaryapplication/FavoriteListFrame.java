/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package dictionaryapplication;

import java.awt.Component;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.File;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.EventObject;
import java.util.List;
import java.util.Map;
import java.util.TreeMap;
import javax.swing.AbstractCellEditor;
import javax.swing.DefaultCellEditor;
import javax.swing.JButton;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.RowSorter;
import javax.swing.SortOrder;
import javax.swing.event.CellEditorListener;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellEditor;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;

/**
 *
 * @author LENOVO
 */
class ButtonRenderer extends JButton implements TableCellRenderer {

    public ButtonRenderer() {
        setOpaque(true);
    }
    
    @Override
    public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
        setText((value == null) ? "" : value.toString());
        
        return this;
    }
    
}


public class FavoriteListFrame extends javax.swing.JFrame {
    
    private Dictionary.Mode mode;

    /**
     * Creates new form FavaroiteListFrame
     */
    public FavoriteListFrame() {
        mode = Dictionary.Mode.ENG_VIE_MODE;
        initComponents();
//        JScrollPane scrollPanel = new JScrollPane();
//        scrollPanel.add(favoriteTable);
        
//        this.add(scrollPanel);
         
        loadFavoriteWords();

    }
    
    private void loadFavoriteWords() {
        Map<String, Meaning> map;
        if(mode == Dictionary.Mode.ENG_VIE_MODE) {
            map = Dictionary.getInstance().getEngVieMap();
        } else {
            map = Dictionary.getInstance().getVieEngMap();
        }
        
        Map<String, Meaning> favoriteWords = new TreeMap<>();
        
        for(Map.Entry entry : map.entrySet()) {
            if(((Meaning)entry.getValue()).isFavoriate()) {
                favoriteWords.put((String) entry.getKey(),(Meaning) entry.getValue());
            }
        }
        
            DefaultTableModel defaultTableModel = new DefaultTableModel();
            favoriteTable.setModel(defaultTableModel);


            defaultTableModel.addColumn("Word");
            defaultTableModel.addColumn("Meaning");
            defaultTableModel.addColumn("Action");
             TableRowSorter<TableModel> sorter = new TableRowSorter<>(favoriteTable.getModel());
             Comparator<String> comparator = (String o1, String o2) -> {
                 return Helper.unicodeToASCII(o1).compareTo(Helper.unicodeToASCII(o2));
             };
            favoriteTable.setRowSorter(sorter);
            sorter.setSortable(0, true);
            sorter.setComparator(0, comparator);
            sorter.setSortable(1, false);
            sorter.setSortable(2, false);
            
            ButtonRenderer buttonRenderer = new ButtonRenderer();
            favoriteTable.getColumnModel().getColumn(2).setCellRenderer(buttonRenderer);
            favoriteTable.getColumnModel().getColumn(2).setCellEditor(new JButtonEditor());
            
            
            favoriteWords.forEach((word, meaning) -> {
                defaultTableModel.addRow(new Object[]{word, meaning.getMeaning(), "Remove"});
            });
            
            sorter.setSortKeys(List.of(new RowSorter.SortKey(0, SortOrder.ASCENDING)));
            
            sorter.sort();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        modeTitle = new javax.swing.JLabel();
        swapBtn = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        favoriteTable = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Mode");

        modeTitle.setText("ENG - VIE");

        swapBtn.setText("Swap");
        swapBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                swapBtnActionPerformed(evt);
            }
        });

        favoriteTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Word", "Meaning", "Action"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(favoriteTable);
        if (favoriteTable.getColumnModel().getColumnCount() > 0) {
            favoriteTable.getColumnModel().getColumn(2).setResizable(false);
        }

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(modeTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(swapBtn))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(25, 25, 25)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 470, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(32, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(modeTitle)
                    .addComponent(swapBtn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 301, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(25, 25, 25))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void swapBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_swapBtnActionPerformed
        if(mode == Dictionary.Mode.ENG_VIE_MODE) {
            mode = Dictionary.Mode.VIE_ENG_MODE;
            modeTitle.setText("VIE - ENG");
            loadFavoriteWords();
        } else {
            mode = Dictionary.Mode.ENG_VIE_MODE;
            modeTitle.setText("ENG - VIE");
            loadFavoriteWords();
        }
    }//GEN-LAST:event_swapBtnActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FavoriteListFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FavoriteListFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FavoriteListFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FavoriteListFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FavoriteListFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable favoriteTable;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel modeTitle;
    private javax.swing.JButton swapBtn;
    // End of variables declaration//GEN-END:variables
    
    class JButtonEditor extends AbstractCellEditor implements TableCellEditor {

            private JButton button;
            private String txt;

            public JButtonEditor() {
                super();
                button = new JButton();
                button.setOpaque(true);
                button.addActionListener(new ActionListener() {
                    JTable table = FavoriteListFrame.this.favoriteTable;
                    public void actionPerformed(ActionEvent ae) {
                        int row = table.getSelectedRow();
                        Dictionary.Mode mode = FavoriteListFrame.this.mode;
                        int choice = JOptionPane.showConfirmDialog(rootPane, "Are your sure to remove this word from favorite list?", "Confirm", JOptionPane.YES_NO_OPTION);
                        if(choice == JOptionPane.NO_OPTION) {
                            return;
                        } 
                        String word = (String) table.getValueAt(row, 0);
                        
                        Dictionary.getInstance().toggleFavoriteWord(word, mode);
               
                        
                        ((DefaultTableModel)table.getModel()).removeRow(row);
                        ProcessingDialog dialog = new ProcessingDialog(null, true);
        
                        dialog.addWindowListener(new WindowAdapter() {
                            @Override
                            public void windowOpened(WindowEvent e) {
                                if(mode == Dictionary.Mode.ENG_VIE_MODE) {
                                    XMLUtil.addWord(Dictionary.getInstance().getEngVieMap(), new File("Anh_Viet.xml"));
                                } else {
                                    XMLUtil.addWord(Dictionary.getInstance().getVieEngMap(), new File("Viet_Anh.xml"));
                                }

                                dialog.dispose();


                            }
                        });

                        dialog.setVisible(true);
                                    }
                });
                
            }

            public Object getCellEditorValue() {
                return null;
            }

            public Component getTableCellEditorComponent(JTable table, Object value, boolean isSelected, int row, int column) {
                txt = (value == null) ? "" : value.toString();
                button.setText(txt);
                return button;
            }
        }

}
